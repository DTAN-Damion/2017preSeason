package org.usfirst.frc.team6763.robot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
//Imports the other files needed by the program
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Jaguar;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;

/*
THIS CODE IS FOR THE RIGHT SIDE PEG
*/

public class Robot extends IterativeRobot {
	
	RobotDrive myRobot = new RobotDrive(0, 2);
	Joystick stick = new Joystick(0);
	Timer timer = new Timer();
	Jaguar ArmMotor = new Jaguar(9);
	SpeedController Climber = new Spark(7);
	Joystick mXboxController = new Joystick(1);
	
	//SendableChooser
	
	Encoder rightEncoder; // Right Side Encoder
	Encoder leftEncoder; // Left Side Encoder
	
	float TicksPerInch = 108.333333F; // Number of Encoder Ticks per Inch
	int InchesPerFoot = 12; 
	
	double leftPower = 0.475;
	double rightPower = 0.5;
	double error = 0.0;
	double kp = 0.05;
	double maxEncoderError = TicksPerInch * 85;
	
	@Override
	public void robotInit() {
		rightEncoder = new Encoder(2, 3);
    	rightEncoder.setReverseDirection(true);
    	leftEncoder = new Encoder (0, 1);
    	leftEncoder.setReverseDirection(false);
    	CameraServer.getInstance().startAutomaticCapture();
    	
    	
	}

	@Override
	public void autonomousInit() {
		timer.reset();
		timer.start();
		System.out.println("Master Count,Slave Count,Error,KP,MasterPower,SlavePower");
		leftEncoder.reset();
		rightEncoder.reset();
	}
	
	@Override
	public void autonomousPeriodic() {
		/*
		THIS IS FOR THE RIGHT PEG
		*/
		
		int STRAIGHT1 = 87; // [in]
		int TURN1 = 16;
		int STRAIGHT2 = 27;
		
		double DEFAULT_RIGHT_PERCENT = 0.54;
		
		ArmMotor.set(0.12);
		
		if (rightEncoder.get() < (TicksPerInch * STRAIGHT1)) {
			System.out.println("Robot should be driving straight");
			
			leftPower = -0.64;
			rightPower = -0.6;
			error = leftEncoder.get() - rightEncoder.get();
			
			if (error > 50){
				leftPower = -0.63;
			}
			else if (error < -50){
				leftPower = -0.65;
			}
			else if (error > -50 && error < 50){
				leftPower = -0.64;
			}
			
		}
		else if (rightEncoder.get() > (TicksPerInch * STRAIGHT1) && rightEncoder.get() < (TicksPerInch * (STRAIGHT1 + TURN1))) {
			System.out.println("Robot should be turning left");
			leftPower = 0.64;
			rightPower = -0.6;
		}
		
		else if (rightEncoder.get() > (TicksPerInch * (STRAIGHT1 + TURN1)) && rightEncoder.get() < (TicksPerInch * (STRAIGHT1 + TURN1 + STRAIGHT2))) {
			leftPower = -0.64;
			rightPower = -0.6;
			System.out.println("Robot should be driving straight (2)");
		}
		else if (rightEncoder.get() > (TicksPerInch * (STRAIGHT1 + TURN1 + STRAIGHT2))) {
			myRobot.tankDrive(0,0);
			leftPower = 0;
			rightPower = 0;
			System.out.println("Robot should be stopped");
		}
		
		
		myRobot.tankDrive(leftPower, rightPower);
		
		
		//System.out.println(leftEncoder.get() + "," + rightEncoder.get() + "," + error + "," + kp + "," + leftPower + "," + rightPower);
		//System.out.println(leftEncoder.get() + "," + rightEncoder.get());
	}
		
	@Override
	public void teleopInit() {
	}
	
	@Override
	public void teleopPeriodic() {
		myRobot.arcadeDrive(mXboxController);
		if (mXboxController.getRawAxis(5) > 0){
			Climber.set(0);
		}
		else{
			Climber.set(mXboxController.getRawAxis(5));
		}
		ArmMotor.set(stick.getRawAxis(1)*.13*-1);
	}

	@Override
	public void testPeriodic() {
		LiveWindow.run();
	}
	
	public void disabledPeriodic(){
		 //System.out.println("RightEncoder = " + rightEncoder.get());
		 //System.out.println("LeftEncoder = " + leftEncoder.get());
		//System.out.println(leftEncoder.get() + " , " + rightEncoder.get());
	 }
}
